syntax = "proto3";

package tigera.goldmane.v1;

import "tigera/goldmane/v1/goldmane.proto";
import "google/api/client.proto";

option csharp_namespace = "Goldmane";
option go_package = "tigera.golang.org/genproto/goldmane/v1;goldmane";
option java_multiple_files = true;
option java_outer_classname = "Goldmane";
option java_package = "com.goldmane.v1"; 
option objc_class_prefix = "GMN";
option php_namespace = "Goldmane";
option ruby_package = "Goldmane";

// Statistics provides APIs for retrieving Flow statistics.
service Statistics {
  option (google.api.default_host) = "cloud.tigera.io";
  // List returns statistics data for the given request. One StatisticsResult will be returned for
  // each matching PolicyHit and direction over the timeframe, containing time-series data covering the
  // provided time range.
  rpc List(StatisticsRequest) returns (stream StatisticsResult);
}

message StatisticsRequest {
  // The start time from which to collect statistics (inclusive).
  //
  // - A value of zero indicates the oldest start time available by the server.
  // - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
  // - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
  int64 start_time_gte = 1;

  // The end time indicates the end of the windows from which to collect statistics.
  //
  // - A value of zero means "now", as determined by the server at the time of request.
  // - A value greater than zero indicates an absolute time in seconds since the Unix epoch.
  // - A value less than zero indicates a relative number of seconds from "now", as determined by the server.
  int64 start_time_lt = 2;

  // Type is the type of statistic to return. e.g., packets, bytes, etc.
  StatisticType type = 3;

  // Configure statistics aggregation.
  // - Policy: each StatisticsResult will contain statistics for a particular policy.
  // - PolicyRule: each StatisticsResult will contain statistics for a particular policy rule.
  // - Any: return both per-Policy and per-PolicyRule results.
  StatisticsGroupBy group_by = 4;

  // Optionally configure fields to filter results. If provided, any policies not matching the PolicyMatch
  // will be omitted from the results.
  PolicyMatch policy_match = 5;

  // TimeSeries configures whether or not to return time-series data in the response. If true,
  // the response will include multiple datapoints over the given time window. If false, data
  // across the time window will be aggregated into a single data point.
  bool time_series = 6;
}

message StatisticsResult {
  // Policy identifies the policy / rule for which this data applies. Its meaning is contextualized
  // by the GroupBy field.
  //
  // - StatisticsGroupBy_Policy: this field represents the specific Policy, and statistics are aggregated across all
  //                             rules within that policy. Rule identifiers (Action, RuleID) will be omitted.
  //
  // - StatisticsGroupBy_PolicyRule: this field identifies a specific rule within a Policy, and statistics are scoped to
  //                                 that particular rule.
  PolicyHit policy = 1;

  // For statistics results targeting a specific policy rule, the direction
  // contextualizes the rule ID as either an ingress or egress rule.
  //
  // For statistics results grouped by policy, both ingress and egress statistics will be included.
  RuleDirection direction = 2;

  // GroupBy indicates whether the statistics in this result are aggregated for a policy, or for
  // a specific rule within that policy.
  StatisticsGroupBy group_by = 3;

  // Type indicates the type of data carried in this result. e.g., PacketCount vs ByteCount.
  StatisticType type = 4;

  // AllowedIn contains the count of the requested statistic that was allowed for ingress flows.
  // The semantic meaning (e.g., packets vs bytes) is indicated by the Type field.
  repeated int64 allowed_in = 5;
  repeated int64 allowed_out = 6;

  repeated int64 denied_in = 7;
  repeated int64 denied_out = 8;

  repeated int64 passed_in = 9;
  repeated int64 passed_out = 10;

  // X is the x axis of the data for time-series data. i.e., the timestamp. For non-timeseries data,
  // this will be nil.
  repeated int64 x = 11;
}